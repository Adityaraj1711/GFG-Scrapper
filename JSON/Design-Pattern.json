{
    "Abstract Factory Pattern": "https://www.geeksforgeeks.org/abstract-factory-pattern/",
    "Adapter Pattern": "https://www.geeksforgeeks.org/adapter-pattern/",
    "An introduction to Flowcharts": "https://www.geeksforgeeks.org/an-introduction-to-flowcharts/",
    "Bridge Design Pattern": "https://www.geeksforgeeks.org/bridge-design-pattern/",
    "Builder Design Pattern": "https://www.geeksforgeeks.org/builder-design-pattern/",
    "Business Delegate Pattern": "https://www.geeksforgeeks.org/business-delegate-pattern/",
    "Chain of Responsibility Design Pattern": "https://www.geeksforgeeks.org/chain-responsibility-design-pattern/",
    "Command Pattern": "https://www.geeksforgeeks.org/command-pattern/",
    "Composite Design Pattern": "https://www.geeksforgeeks.org/composite-design-pattern/",
    "Composite Design Pattern in C++": "https://www.geeksforgeeks.org/composite-pattern-cpp/",
    "Curiously recurring template pattern (CRTP)": "https://www.geeksforgeeks.org/curiously-recurring-template-pattern-crtp-2/",
    "Data Access Object Pattern": "https://www.geeksforgeeks.org/data-access-object-pattern/",
    "Decorator Pattern | Set 1 (Background)": "https://www.geeksforgeeks.org/decorator-pattern/",
    "Decorator Pattern | Set 3 (Coding the Design)": "https://www.geeksforgeeks.org/decorator-pattern-set-3-coding-the-design/",
    "Dependency Inversion Principle (SOLID)": "https://www.geeksforgeeks.org/dependecy-inversion-principle-solid/",
    "Design Patterns | Set 1 (Introduction)": "https://www.geeksforgeeks.org/design-patterns-set-1-introduction/",
    "Design Patterns | Set 2 (Factory Method)": "https://www.geeksforgeeks.org/design-patterns-set-2-factory-method/",
    "Design Scalable System like Foursquare": "https://www.geeksforgeeks.org/design-scalable-system-like-foursquare/",
    "Design Scalable System like Instagram": "https://www.geeksforgeeks.org/design-scalable-system-like-instagram/",
    "Design Video Sharing System Like Youtube": "https://www.geeksforgeeks.org/design-video-sharing-system-like-youtube/",
    "Design a movie ticket booking system like Bookmyshow": "https://www.geeksforgeeks.org/design-movie-ticket-booking-system-like-bookmyshow/",
    "Design an online book reader system": "https://www.geeksforgeeks.org/design-an-online-book-reader-system/",
    "Design an online hotel booking system like OYO Rooms": "https://www.geeksforgeeks.org/design-online-hotel-booking-system-like-oyo-rooms/",
    "Design data structures and algorithms for in-memory file system": "https://www.geeksforgeeks.org/design-data-structures-algorithms-memory-file-system/",
    "Design the Data Structures(classes and objects)for a generic deck of cards": "https://www.geeksforgeeks.org/design-data-structuresclasses-objectsfor-generic-deck-cards/",
    "Facade Design Pattern | Introduction": "https://www.geeksforgeeks.org/facade-design-pattern-introduction/",
    "Flyweight Design Pattern": "https://www.geeksforgeeks.org/flyweight-design-pattern/",
    "Front Controller Design Pattern": "https://www.geeksforgeeks.org/front-controller-design-pattern/",
    "How to design a parking lot using object-oriented principles?": "https://www.geeksforgeeks.org/design-parking-lot-using-object-oriented-principles/",
    "How to prevent Singleton Pattern from Reflection, Serialization and Cloning?": "https://www.geeksforgeeks.org/prevent-singleton-pattern-reflection-serialization-cloning/",
    "Implementing Iterator pattern of a single Linked List": "https://www.geeksforgeeks.org/implementing-iterator-pattern-of-a-single-linked-list/",
    "Intercepting Filter Pattern": "https://www.geeksforgeeks.org/intercepting-filter-pattern/",
    "Interpreter Design Pattern": "https://www.geeksforgeeks.org/interpreter-design-pattern/",
    "Iterator Pattern": "https://www.geeksforgeeks.org/iterator-pattern/",
    "Java Singleton Design Pattern Practices with Examples": "https://www.geeksforgeeks.org/java-singleton-design-pattern-practices-examples/",
    "Lazy Loading Design Pattern": "https://www.geeksforgeeks.org/lazy-loading-design-pattern/",
    "MVC Design Pattern": "https://www.geeksforgeeks.org/mvc-design-pattern/",
    "Mediator Design Pattern": "https://www.geeksforgeeks.org/mediator-design-pattern-2/",
    "Mediator design pattern": "https://www.geeksforgeeks.org/mediator-design-pattern/",
    "Memento design pattern": "https://www.geeksforgeeks.org/memento-design-pattern/",
    "Null object Design Pattern": "https://www.geeksforgeeks.org/null-object-design-pattern/",
    "Object Pool Design Pattern": "https://www.geeksforgeeks.org/object-pool-design-pattern/",
    "Observer Pattern | Set 1 (Introduction)": "https://www.geeksforgeeks.org/observer-pattern-set-1-introduction/",
    "Observer Pattern | Set 2 (Implementation)": "https://www.geeksforgeeks.org/observer-pattern-set-2-implementation/",
    "Prototype Design Pattern": "https://www.geeksforgeeks.org/prototype-design-pattern/",
    "Proxy Design Pattern": "https://www.geeksforgeeks.org/proxy-design-pattern/",
    "Service Locator Pattern": "https://www.geeksforgeeks.org/service-locator-pattern/",
    "Singleton Class in Java": "https://www.geeksforgeeks.org/singleton-class-java/",
    "Singleton Design Pattern | Implementation": "https://www.geeksforgeeks.org/singleton-design-pattern/",
    "Singleton Design Pattern | Introduction": "https://www.geeksforgeeks.org/singleton-design-pattern-introduction/",
    "State Design Pattern": "https://www.geeksforgeeks.org/state-design-pattern/",
    "Strategy Pattern | Set 1 (Introduction)": "https://www.geeksforgeeks.org/strategy-pattern-set-1/",
    "Strategy Pattern | Set 2 (Implementation)": "https://www.geeksforgeeks.org/strategy-pattern-set-2/",
    "Template Method Design Pattern": "https://www.geeksforgeeks.org/template-method-design-pattern/",
    "The Decorator Pattern | Set 2 (Introduction and Design)": "https://www.geeksforgeeks.org/the-decorator-pattern-set-2-introduction-and-design/",
    "Unified Modeling Language (UML) | Activity Diagrams": "https://www.geeksforgeeks.org/unified-modeling-language-uml-activity-diagrams/",
    "Unified Modeling Language (UML) | An Introduction": "https://www.geeksforgeeks.org/unified-modeling-language-uml-introduction/",
    "Unified Modeling Language (UML) | Class Diagrams": "https://www.geeksforgeeks.org/unified-modeling-language-uml-class-diagrams/",
    "Unified Modeling Language (UML) | Object Diagrams": "https://www.geeksforgeeks.org/unified-modeling-language-uml-object-diagrams/",
    "Unified Modeling Language (UML) | Sequence Diagrams": "https://www.geeksforgeeks.org/unified-modeling-language-uml-sequence-diagrams/",
    "Unified Modeling Language (UML) | State Diagrams": "https://www.geeksforgeeks.org/unified-modeling-language-uml-state-diagrams/",
    "Visitor design pattern": "https://www.geeksforgeeks.org/visitor-design-pattern/"
}